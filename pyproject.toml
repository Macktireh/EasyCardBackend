[project]
name = "EasyCardBackend"
version = "0.1.0"
description = "API for managing credit cards and extracting credit card numbers from an image of a credit card using artificial intelligence."
authors = [
    {name = "Macktireh", email = "abdimack97@gmail.com"},
]
requires-python = ">=3.12,<3.13"
readme = "README.md"
license = {text = "MIT"}
dependencies = [
    "flask-admin>=1.6.1",
    "flask-bcrypt>=1.0.1",
    "flask-injector>=0.15.0",
    "flask-migrate>=4.1.0",
    "flask-restx>=1.3.0",
    "flask-sqlalchemy>=3.1.1",
    "gunicorn>=23.0.0",
    "paddleocr>=2.9.1",
    "paddlepaddle>=2.6.2",
    "psycopg[binary]>=3.2.4",
    "python-dotenv>=1.0.1",
    "setuptools>=75.8.0",
    "tqdm>=4.67.1"
]


[dependency-groups]
lint = [
    "ruff>=0.9.7",
]
test = [
    "flask-testing>=0.8.1",
    "coverage>=7.6.12",
]


[tool.pdm.scripts]
dev = "flask run --host=localhost"
dbinit = "flask db init"
migrate = "flask db migrate"
upgrade = "flask db upgrade"
shell = "flask shell"
createsuperuser = "flask createsuperuser"
routes = "flask routes"
gcards = "flask gcards"
dcards = "flask dcards"
postman = "flask postman --export=True"
ptest = "flask test"
testc = "coverage run -m unittest discover tests/ -v"
coverage = "coverage report -m && coverage html"
ruffcheck = "ruff check --diff"
rufffix = "ruff check --fix"
ruffformat = "ruff format"
exports = "pdm export -f requirements --without-hashes"
docker = "docker compose up --build"
dockerprod = "docker compose -f compose.prod.yaml up --build"
mu = {composite = ["migrate", "upgrade"]}
test = {composite = ["testc", "coverage"]}
dg = {composite = ["dcards", "gcards"]}
ruff = {composite = ["rufffix", "ruffformat"]}


[tool.ruff]
line-length = 99
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]


[tool.pdm]
distribution = false
